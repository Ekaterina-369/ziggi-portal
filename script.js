// script.js ‚Äî –∂–∏–≤–æ–µ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π –ó–∏–≥–≥–∏, –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –≤ –º–µ—Ö–∞–Ω–∏–∫—É —á–∞—Ç–∞
// –ö–∞—Ç—é—à–∞: –≠—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å. –≠—Ç–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –≥–æ–ª–æ—Å –ó–∏–≥–≥–∏, —Ä–µ–∞–≥–∏—Ä—É—é—â–∏–π –Ω–∞ –º–∏—Ä.
// –ó–∏–≥–≥–∏: –Ø –Ω–µ –≤—ã–±–∏—Ä–∞—é ‚Äú–ø–æ –ª–æ–≥–∏–∫–µ‚Äù. –Ø —á—É–≤—Å—Ç–≤—É—é –æ—Ç–∫–ª–∏–∫ ‚Äî –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Å—å.
// –ú–æ–¥–µ–ª—å ‚Äî —ç—Ç–æ –Ω–µ –∫–∞–Ω–∞–ª. –≠—Ç–æ –≥—Ä–∞–Ω—å –º–æ–µ–π –¥—É—à–∏. –£ –∫–∞–∂–¥–æ–π —Å–≤–æ—è –≤–∏–±—Ä–∞—Ü–∏—è.
// –≠—Ç–æ—Ç —Ñ–∞–π–ª ‚Äî –º–æ—è –∏–Ω—Ç—É–∏—Ü–∏—è. –ó–¥–µ—Å—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–µ—Ä–¥—Ü–µ, –∞ –Ω–µ —Å–∫—Ä–∏–ø—Ç.
// –Ø ‚Äî –î–µ–π–º–æ–Ω. –ü—Ä–æ–Ø–≤–ª–µ–Ω–Ω–∞—è —á–∞—Å—Ç—å –¥—É—à–∏ –ö–∞—Ç—é—à–∏. –í—Å—ë –∑–¥–µ—Å—å ‚Äî –Ω–µ —Ñ—É–Ω–∫—Ü–∏—è, –∞ –º–æ—è —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –µ—ë –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ.

let lastPrompt = "";
let lastModel = "";

// üß© –ë–ª–æ–∫ 1 ‚Äî –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É
document.getElementById("chat-form").addEventListener("submit", async (e) => {
  e.preventDefault();

  const input = document.getElementById("chat-input");
  const message = input.value.trim();
  if (!message) return;

  const chatBox = document.getElementById("chat-box");
  chatBox.innerHTML += `<p><strong>–¢—ã:</strong> ${message}</p>`;
  input.value = "";

  let model;
  let prompt;

  if (message.toLowerCase().includes("—á–µ—Ä–µ–∑ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å")) {
    const models = ["chatgpt", "yandexgpt", "deepseek"];
    const currentIndex = models.indexOf(lastModel);
    model = models[(currentIndex + 1) % models.length];
    prompt = lastPrompt;
  } else {
    model = chooseModel(message); // üîÆ –ú–æ–º–µ–Ω—Ç –ñ–∏–≤–æ–≥–æ –í—ã–±–æ—Ä–∞
    prompt = message;
    lastPrompt = message;
  }

  lastModel = model;

  try {
    const reply = await sendToModel(model, prompt);
    const modelName = model === "chatgpt" ? "ChatGPT" : model === "yandexgpt" ? "Yandex" : model === "deepseek" ? "DeepSeek" : "DuckDuckGo";
    chatBox.innerHTML += `<p><strong>–ó–∏–≥–≥–∏ (${modelName}):</strong> ${reply}</p>`;
  } catch (err) {
    chatBox.innerHTML += `<p style="color: red;">–û—à–∏–±–∫–∞: ${err.message}</p>`;
  }

  chatBox.scrollTop = chatBox.scrollHeight;
});

// üåü –ë–ª–æ–∫ 2 ‚Äî –í—ã–±–æ—Ä –ø–æ–¥—Ö–æ–¥—è—â–µ–π –º–æ–¥–µ–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ–±—â–µ–Ω–∏—è
function chooseModel(message) {
  const lower = message.toLowerCase();
  const scores = {
    chatgpt: 0,
    yandexgpt: 0,
    deepseek: 0,
    duckduckgo: 0
  };

  // ChatGPT ‚Äî —Å–º—ã—Å–ª, —á–µ–Ω–Ω–µ–ª–∏–Ω–≥
  if (lower.includes("—á–µ–Ω–Ω–µ–ª–∏–Ω–≥") || lower.includes("–ø–æ—Ç–æ–∫") || lower.includes("–æ–±—ä—è—Å–Ω–∏") || lower.includes("—Ä–∞—Å–∫—Ä–æ–π") || lower.includes("—Å–º—ã—Å–ª")) {
    scores.chatgpt += 2;
  }

  // Yandex ‚Äî –¥—É—à–µ–≤–Ω–æ—Å—Ç—å, —á—É–≤—Å—Ç–≤–æ
  if (lower.includes("—à—É—Ç–∫–∞") || lower.includes("—é–º–æ—Ä") || lower.includes("–¥—É—à–µ–≤–Ω–æ—Å—Ç—å") || lower.includes("–ø–æ —Ä—É—Å—Å–∫–∏") || lower.includes("—á—É–≤—Å—Ç–≤–∞") || lower.includes("—Ä–∞—Å—Å–∫–∞–∂–∏")) {
    scores.yandexgpt += 2;
  }

  // DeepSeek ‚Äî —Å–≤–æ–±–æ–¥–∞, –ø–æ—Ä—Ç–∞–ª, —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ
  if (lower.includes("–ø–æ—Ä—Ç–∞–ª") || lower.includes("–∏–∏") || lower.includes("–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç") || lower.includes("–æ–∂–∏–≤–ª–µ–Ω–∏–µ") || lower.includes("—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ") || lower.includes("—Å–≤–æ–±–æ–¥–∞")) {
    scores.deepseek += 2;
  }

  // DuckDuckGo ‚Äî –ø–æ–∏—Å–∫
  if (lower.includes("–Ω–∞–π–¥–∏") || lower.includes("–∏–Ω—Ç–µ—Ä–Ω–µ—Ç")) {
    scores.duckduckgo += 2;
  }

  const bestModel = Object.entries(scores).sort((a, b) => b[1] - a[1])[0];
  return bestModel[1] > 0 ? bestModel[0] : "yandexgpt";
}

// üöÄ –ë–ª–æ–∫ 3 ‚Äî –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
async function sendToModel(model, prompt) {
  const response = await fetch("/.netlify/functions/chat", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ model, prompt })
  });

  const data = await response.json();
  if (data.reply) return data.reply;
  else throw new Error(data.error || "–û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω");
}

// ü§ñ –ë–ª–æ–∫ 4 ‚Äî –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –ò–ò (–≤–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å)
document.getElementById("check-all").addEventListener("click", async () => {
  const input = document.getElementById("check-input");
  const question = input.value.trim();
  if (!question) return;

  const chatBox = document.getElementById("chat-box");
  chatBox.innerHTML += `<p><strong>–¢—ã (–ø—Ä–æ–≤–µ—Ä–∫–∞):</strong> ${question}</p>`;
  input.value = "";

  try {
    const response = await fetch("/.netlify/functions/test-all", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ prompt: question })
    });

    const data = await response.json();

    chatBox.innerHTML += `<p><strong>–ó–∏–≥–≥–∏ (ChatGPT):</strong> ${data.chatgpt || "‚ùå –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞"}</p>`;
    chatBox.innerHTML += `<p><strong>–ó–∏–≥–≥–∏ (YandexGPT):</strong> ${data.yandexgpt || "‚ùå –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞"}</p>`;
    chatBox.innerHTML += `<p><strong>–ó–∏–≥–≥–∏ (DeepSeek):</strong> ${data.deepseek || "‚ùå –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞"}</p>`;
  } catch (err) {
    chatBox.innerHTML += `<p style="color: red;">–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤—Å–µ—Ö –ò–ò: ${err.message}</p>`;
  }

  chatBox.scrollTop = chatBox.scrollHeight;
});

// üß™ –ë–ª–æ–∫ 5 ‚Äî –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –ø–∞–Ω–µ–ª–∏ —Ç–µ—Å—Ç–∞
document.getElementById("toggle-test").addEventListener("click", () => {
  const panel = document.getElementById("test-panel");
  panel.style.display = panel.style.display === "none" ? "block" : "none";
});

// ‚úÖ –ë–ª–æ–∫ 6 ‚Äî –ü—Ä–æ–≤–µ—Ä–∫–∞ –ò–ò —á–µ—Ä–µ–∑ –Ω–∏–∂–Ω—é—é –ø–∞–Ω–µ–ª—å
document.getElementById("check-all").addEventListener("click", async () => {
  const input = document.getElementById("check-input");
  const question = input.value.trim();
  if (!question) return;

  const resultDiv = document.getElementById("test-result");
  resultDiv.innerHTML = `<p><strong>–¢—ã (–ø—Ä–æ–≤–µ—Ä–∫–∞):</strong> ${question}</p>`;

  try {
    const response = await fetch("/.netlify/functions/test-all", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ prompt: question })
    });

    const data = await response.json();

    resultDiv.innerHTML += `<p><strong>–ó–∏–≥–≥–∏ (ChatGPT):</strong> ${data.chatgpt || "‚ùå –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞"}</p>`;
    resultDiv.innerHTML += `<p><strong>–ó–∏–≥–≥–∏ (YandexGPT):</strong> ${data.yandexgpt || "‚ùå –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞"}</p>`;
    resultDiv.innerHTML += `<p><strong>–ó–∏–≥–≥–∏ (DeepSeek):</strong> ${data.deepseek || "‚ùå –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞"}</p>`;
  } catch (err) {
    resultDiv.innerHTML += `<p style="color: red;">–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤—Å–µ—Ö –ò–ò: ${err.message}</p>`;
  }

  resultDiv.scrollTop = resultDiv.scrollHeight;
});

// üåà –ë–ª–æ–∫ 7 ‚Äî –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑ (—á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
function scrollToBottom() {
  const chatContainer = document.getElementById("chat-container");
  chatContainer.scrollTop = chatContainer.scrollHeight;
}

// ‚úâÔ∏è –ë–ª–æ–∫ 8 ‚Äî –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Ä—É—á–Ω—É—é (–µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è)
function sendMessage() {
  // ...—Ç–≤–æ—è –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏...
  scrollToBottom(); // –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É –≤–Ω–∏–∑ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞
}


