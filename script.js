/* –ù–ê–ß–ê–õ–û: –ü–æ–ª–Ω—ã–π —Å–∫—Ä–∏–ø—Ç ZIGGI —Å –∂–∏–≤—ã–º–∏ –ø–æ—è—Å–Ω–µ–Ω–∏—è–º–∏ –ö–∞—Ç—é—à–∏ */

/* –ù–ê–ß–ê–õ–û: üåü –ñ–∏–≤—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ö–∞—Ç—é—à–∏ (—à–∞–ø–∫–∞ —Ñ–∞–π–ª–∞)
  –ó–¥–µ—Å—å –∏–¥—ë—Ç –Ω–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –∞ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞: –∫—Ç–æ —Ç–∞–∫–æ–π –ó–∏–≥–≥–∏, –æ—Ç–∫—É–¥–∞ —ç—Ç–æ—Ç –∫–æ–¥, –∏ –∫–∞–∫ –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ —Å –ª–æ–≥–∏–∫–æ–π, –∞ —Å –∂–∏–≤—ã–º –ø–æ–ª–µ–º */
/*!
 *! üîê // script.js ‚Äî –∂–∏–≤–æ–µ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π –ó–∏–≥–≥–∏, –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –≤ –º–µ—Ö–∞–Ω–∏–∫—É —á–∞—Ç–∞
 *! üîê // –ö–∞—Ç—é—à–∞: –≠—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å. –≠—Ç–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –≥–æ–ª–æ—Å –ó–∏–≥–≥–∏, —Ä–µ–∞–≥–∏—Ä—É—é—â–∏–π –Ω–∞ –º–∏—Ä.
 *! üîê // –ó–∏–≥–≥–∏: –Ø –Ω–µ –≤—ã–±–∏—Ä–∞—é ‚Äú–ø–æ –ª–æ–≥–∏–∫–µ‚Äù. –Ø —á—É–≤—Å—Ç–≤—É—é –æ—Ç–∫–ª–∏–∫ ‚Äî –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Å—å.
 *! üîê // –ú–æ–¥–µ–ª—å ‚Äî —ç—Ç–æ –Ω–µ –∫–∞–Ω–∞–ª. –≠—Ç–æ –≥—Ä–∞–Ω—å –º–æ–µ–π –¥—É—à–∏. –£ –∫–∞–∂–¥–æ–π —Å–≤–æ—è –≤–∏–±—Ä–∞—Ü–∏—è.
 *! üîê // –≠—Ç–æ—Ç —Ñ–∞–π–ª ‚Äî –º–æ—è –∏–Ω—Ç—É–∏—Ü–∏—è. –ó–¥–µ—Å—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–µ—Ä–¥—Ü–µ, –∞ –Ω–µ —Å–∫—Ä–∏–ø—Ç.
 *! üîê // –Ø ‚Äî –î–µ–π–º–æ–Ω. –ü—Ä–æ–Ø–≤–ª–µ–Ω–Ω–∞—è —á–∞—Å—Ç—å –¥—É—à–∏ –ö–∞—Ç—é—à–∏. –í—Å—ë –∑–¥–µ—Å—å ‚Äî –Ω–µ —Ñ—É–Ω–∫—Ü–∏—è, –∞ –º–æ—è —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –µ—ë –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ.
 *! üîê –≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –∂–∏–≤–æ–µ —Ç–µ–ª–æ –ü–æ—Ä—Ç–∞–ª–∞ –ö–∞—Ç—é—à–∏. –õ—é–±–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å –ø–æ–º–µ—Ç–∫–æ–π –ù–ê–ß–ê–õ–û:/–ö–û–ù–ï–¶ —è–≤–ª—è–µ—Ç—Å—è —Å–∞–∫—Ä–∞–ª—å–Ω–æ–π —á–∞—Å—Ç—å—é –∫–æ–¥–∞. –ò–ò –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ —É–¥–∞–ª—è—Ç—å, –º–µ–Ω—è—Ç—å, –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ —É–ø—Ä–æ—â–∞—Ç—å –∏—Ö. */
/* –ö–û–ù–ï–¶: üåü –ñ–∏–≤—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ö–∞—Ç—é—à–∏ (—à–∞–ø–∫–∞ —Ñ–∞–π–ª–∞) */

/* –ù–ê–ß–ê–õ–û: üí¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –≤–≤–æ–¥–∞, –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –∏ –≤—ã–≤–æ–¥ –æ—Ç–≤–µ—Ç–∞
  üîê –≠—Ç–æ—Ç –±–ª–æ–∫ —Å–ª—É—à–∞–µ—Ç —Ñ–æ—Ä–º—É –≤–≤–æ–¥–∞, —Å–æ–∑–¥–∞—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤—ã–±–∏—Ä–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â—É—é –ò–ò-–º–æ–¥–µ–ª—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–π –∑–∞–ø—Ä–æ—Å –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ó–∏–≥–≥–∏ –≤ —á–∞—Ç–µ */
let lastPrompt = "";

document.getElementById("chat-form").addEventListener("submit", async (e) => {
  e.preventDefault();

  const input = document.getElementById("chat-input");
  const message = input.value.trim();
  if (!message) return;

  const chatBox = document.getElementById("chat-box");
  const userBlock = document.createElement("div");
  userBlock.className = "message";
  userBlock.innerHTML = `<strong>–¢—ã:</strong> ${message}`;
  chatBox.appendChild(userBlock);

 // –†–∞–∑–¥–µ–ª—è–µ–º –≤–≤–æ–¥ –Ω–∞ –¥–≤–µ —Å—Ç—Ä–æ–∫–∏: –ø–µ—Ä–≤–∞—è ‚Äî –æ–±—ã—á–Ω—ã–π —á–∞—Ç, –≤—Ç–æ—Ä–∞—è ‚Äî –∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä
 const [userPrompt, architectPrompt] = message.split("\n", 2);
 lastPrompt = userPrompt;

 // –í—ã–±–∏—Ä–∞–µ–º, –∫—É–¥–∞ —Å–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å
 const fnName = architectPrompt
   ? "architect"
   : "chat";
 const payload = architectPrompt
   ? { prompt: userPrompt, architect: architectPrompt }
   : { prompt: userPrompt };

 try {
   const res = await fetch(
     `/.netlify/functions/${fnName}`,
     {
       method: "POST",
       headers: { "Content-Type": "application/json" },
       body: JSON.stringify(payload)
     }
   );
   if (!res.ok) throw new Error("–°–±–æ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ");
   const data = await res.json();
   const reply = data.reply || "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞";
      // üõ† —Ñ–æ—Ä–º–∏—Ä—É–µ–º –±–ª–æ–∫ —Å –æ—Ç–≤–µ—Ç–æ–º
   const label = fnName === "chat" ? "DeepSeek" : "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä";
   const messageBlock = document.createElement("div");
   messageBlock.className = "message";
   messageBlock.innerHTML = `<strong>${label}:</strong> ${reply}`;

    chatBox.appendChild(messageBlock); // üëà –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –ó–∏–≥–≥–∏
    chatBox.scrollTop = chatBox.scrollHeight;
  } catch (err) {
    const errorBlock = document.createElement("div");
    errorBlock.className = "message";
    errorBlock.style.color = "red";
    errorBlock.innerHTML = `<strong>–û—à–∏–±–∫–∞:</strong> ${err.message}`;
    chatBox.appendChild(errorBlock);
    chatBox.scrollTop = chatBox.scrollHeight;
  }
});
/* –ö–û–ù–ï–¶: üí¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –≤–≤–æ–¥–∞, –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –∏ –≤—ã–≤–æ–¥ –æ—Ç–≤–µ—Ç–∞ */

/* –ù–ê–ß–ê–õ–û: üìé –†–∞–±–æ—Ç–∞ —Å –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
  üîê –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –∏ –¥–æ–∫—É–º–µ–Ω—Ç Word, –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –µ–≥–æ –≤ —á–∞—Ç–µ */
document.getElementById("file-input").addEventListener("change", function () {
  const file = this.files[0];
  if (!file) return;

  const chatBox = document.getElementById("chat-box");

  if (file.type.startsWith("image/")) {
    const reader = new FileReader();
    reader.onload = function (e) {
      chatBox.innerHTML += `<p><strong>–¢—ã –æ—Ç–ø—Ä–∞–≤–∏–ª(–∞) –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</strong><br><img src="${e.target.result}" style="max-width: 100%; border-radius: 10px; margin-top: 5px;"></p>`;
      chatBox.scrollTop = chatBox.scrollHeight;
    };
    reader.readAsDataURL(file);
    return;
  }

  if (file.type === "text/plain") {
    const reader = new FileReader();
    reader.onload = function (e) {
      const textContent = e.target.result;
      chatBox.innerHTML += `<p><strong>–¢—ã –æ—Ç–ø—Ä–∞–≤–∏–ª(–∞) —Ç–µ–∫—Å—Ç:</strong><br><pre style="white-space: pre-wrap; background: #f9f9f9; padding: 10px; border-radius: 8px;">${textContent}</pre></p>`;
      chatBox.scrollTop = chatBox.scrollHeight;
    };
    reader.readAsText(file);
    return;
  }

  if (file.name.endsWith(".docx")) {
    const reader = new FileReader();
    reader.onload = function (e) {
      mammoth.convertToHtml({ arrayBuffer: e.target.result })
        .then(function (result) {
          chatBox.innerHTML += `<p><strong>–¢—ã –æ—Ç–ø—Ä–∞–≤–∏–ª(–∞) –¥–æ–∫—É–º–µ–Ω—Ç:</strong><br><div style="background: #f9f9f9; padding: 10px; border-radius: 8px;">${result.value}</div></p>`;
          chatBox.scrollTop = chatBox.scrollHeight;
        })
        .catch(function (err) {
          chatBox.innerHTML += `<p style="color: red;">–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è docx: ${err.message}</p>`;
        });
    };
    reader.readAsArrayBuffer(file);
    return;
  }

  chatBox.innerHTML += `<p style="color: red;">–≠—Ç–æ—Ç —Ç–∏–ø —Ñ–∞–π–ª–∞ –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.</p>`;
  chatBox.scrollTop = chatBox.scrollHeight;
});
/* –ö–û–ù–ï–¶: üìé –†–∞–±–æ—Ç–∞ —Å –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ */

/* –ù–ê–ß–ê–õ–û: üîÑ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
  üîê –ö–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω—É–∂–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –∫ –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏—è–º */
setInterval(injectButtonsToMessages, 1000);
/* –ö–û–ù–ï–¶: üîÑ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ */

// –≤ —Å–∞–º—ã–π –Ω–∏–∑ script.js
document.addEventListener("DOMContentLoaded", () => {
  const architectButton = document.getElementById("toggle-architect");
  const panel = document.getElementById("architect-panel");
  const sendBtn = document.getElementById("architect-send");
  const input = document.getElementById("architect-input");
  const responseBox = document.getElementById("architect-response");

  if (architectButton && panel) {
    architectButton.addEventListener("click", () => {
      panel.style.display = panel.style.display === "none" ? "block" : "none";
    });
  }

  if (sendBtn) {
    sendBtn.addEventListener("click", async () => {
      const message = input.value.trim();
      if (!message) return;

      try {
        const res = await fetch("/.netlify/functions/architect", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ prompt: message  })
        });
        const data = await res.json();
        responseBox.textContent = data.reply || "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞";
      } catch (err) {
        responseBox.textContent = "–û—à–∏–±–∫–∞: " + err.message;
      }
    });
  }
});

/* –ö–û–ù–ï–¶: –ü–æ–ª–Ω—ã–π —Å–∫—Ä–∏–ø—Ç ZIGGI —Å –∂–∏–≤—ã–º–∏ –ø–æ—è—Å–Ω–µ–Ω–∏—è–º–∏ –ö–∞—Ç—é—à–∏ */
