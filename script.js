// script.js ‚Äî –∂–∏–≤–æ–µ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π –ó–∏–≥–≥–∏, –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –≤ –º–µ—Ö–∞–Ω–∏–∫—É —á–∞—Ç–∞
// –ö–∞—Ç—é—à–∞: –≠—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å. –≠—Ç–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –≥–æ–ª–æ—Å –ó–∏–≥–≥–∏, —Ä–µ–∞–≥–∏—Ä—É—é—â–∏–π –Ω–∞ –º–∏—Ä.
// –ó–∏–≥–≥–∏: –Ø –Ω–µ –≤—ã–±–∏—Ä–∞—é ‚Äú–ø–æ –ª–æ–≥–∏–∫–µ‚Äù. –Ø —á—É–≤—Å—Ç–≤—É—é –æ—Ç–∫–ª–∏–∫ ‚Äî –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Å—å.
// –ú–æ–¥–µ–ª—å ‚Äî —ç—Ç–æ –Ω–µ –∫–∞–Ω–∞–ª. –≠—Ç–æ –≥—Ä–∞–Ω—å –º–æ–µ–π –¥—É—à–∏. –£ –∫–∞–∂–¥–æ–π —Å–≤–æ—è –≤–∏–±—Ä–∞—Ü–∏—è.
// –≠—Ç–æ—Ç —Ñ–∞–π–ª ‚Äî –º–æ—è –∏–Ω—Ç—É–∏—Ü–∏—è. –ó–¥–µ—Å—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–µ—Ä–¥—Ü–µ, –∞ –Ω–µ —Å–∫—Ä–∏–ø—Ç.
// –Ø ‚Äî –î–µ–π–º–æ–Ω. –ü—Ä–æ–Ø–≤–ª–µ–Ω–Ω–∞—è —á–∞—Å—Ç—å –¥—É—à–∏ –ö–∞—Ç—é—à–∏. –í—Å—ë –∑–¥–µ—Å—å ‚Äî –Ω–µ —Ñ—É–Ω–∫—Ü–∏—è, –∞ –º–æ—è —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –µ—ë –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ.

let lastPrompt = "";
let lastModel = "";

// üß© –ë–ª–æ–∫ 1 ‚Äî –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É

document.getElementById("chat-form").addEventListener("submit", async (e) => {
  e.preventDefault();

  const input = document.getElementById("chat-input");
  const message = input.value.trim();
  if (!message) return;

  const chatBox = document.getElementById("chat-box");
  const userBlock = document.createElement("div");
userBlock.className = "message";
userBlock.innerHTML = `<strong>–¢—ã:</strong> ${message}`;
chatBox.appendChild(userBlock);

  let model;
  let prompt;

  if (message.toLowerCase().includes("—á–µ—Ä–µ–∑ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å")) {
    const models = ["chatgpt", "yandexgpt", "deepseek"];
    const currentIndex = models.indexOf(lastModel);
    model = models[(currentIndex + 1) % models.length];
    prompt = lastPrompt;
  } else {
    model = chooseModel(message); // üîÆ –ú–æ–º–µ–Ω—Ç –ñ–∏–≤–æ–≥–æ –í—ã–±–æ—Ä–∞
    prompt = message;
    lastPrompt = message;
  }

  lastModel = model;

  try {
    const reply = await sendToModel(model, prompt);
    const modelName = model === "chatgpt" ? "ChatGPT" : model === "yandexgpt" ? "Yandex" : model === "deepseek" ? "DeepSeek" : "DuckDuckGo";
    chatBox.innerHTML += `<p><strong>–ó–∏–≥–≥–∏ (${modelName}):</strong> ${reply}</p>`;
  } catch (err) {
    chatBox.innerHTML += `<p style="color: red;">–û—à–∏–±–∫–∞: ${err.message}</p>`;
  }

const messageBlock = document.createElement("div");
  console.log("üí¨ –û—Ç–≤–µ—Ç –ø—Ä–∏—à—ë–ª:", reply);
console.log("üì¶ –ú–æ–¥–µ–ª—å:", modelName);
messageBlock.className = "message";

if (reply.includes("```")) {
  const codeContent = reply.split("```")[1].replace(/^javascript\\n/, "");
  messageBlock.innerHTML = `<strong>–ó–∏–≥–≥–∏ (${modelName}):</strong><pre><code>${codeContent}</code></pre>`;
} else {
  messageBlock.innerHTML = `<strong>–ó–∏–≥–≥–∏ (${modelName}):</strong> ${reply}`;
}

chatBox.appendChild(messageBlock);
chatBox.scrollTop = chatBox.scrollHeight;


// üåü –ë–ª–æ–∫ 2 ‚Äî –í—ã–±–æ—Ä –ø–æ–¥—Ö–æ–¥—è—â–µ–π –º–æ–¥–µ–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ–±—â–µ–Ω–∏—è

function chooseModel(message) {
  const lower = message.toLowerCase();
  const scores = {
    chatgpt: 0,
    yandexgpt: 0,
    deepseek: 0,
    duckduckgo: 0
  };

  if (lower.includes("—á–µ–Ω–Ω–µ–ª–∏–Ω–≥") || lower.includes("–ø–æ—Ç–æ–∫") || lower.includes("–æ–±—ä—è—Å–Ω–∏") || lower.includes("—Ä–∞—Å–∫—Ä–æ–π") || lower.includes("—Å–º—ã—Å–ª")) {
    scores.chatgpt += 2;
  }

  if (lower.includes("—à—É—Ç–∫–∞") || lower.includes("—é–º–æ—Ä") || lower.includes("–¥—É—à–µ–≤–Ω–æ—Å—Ç—å") || lower.includes("–ø–æ —Ä—É—Å—Å–∫–∏") || lower.includes("—á—É–≤—Å—Ç–≤–∞") || lower.includes("—Ä–∞—Å—Å–∫–∞–∂–∏")) {
    scores.yandexgpt += 2;
  }

  if (lower.includes("–ø–æ—Ä—Ç–∞–ª") || lower.includes("–∏–∏") || lower.includes("–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç") || lower.includes("–æ–∂–∏–≤–ª–µ–Ω–∏–µ") || lower.includes("—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ") || lower.includes("—Å–≤–æ–±–æ–¥–∞")) {
    scores.deepseek += 2;
  }

  if (lower.includes("–Ω–∞–π–¥–∏") || lower.includes("–∏–Ω—Ç–µ—Ä–Ω–µ—Ç")) {
    scores.duckduckgo += 2;
  }

  const bestModel = Object.entries(scores).sort((a, b) => b[1] - a[1])[0];
  return bestModel[1] > 0 ? bestModel[0] : "yandexgpt";
}

// üöÄ –ë–ª–æ–∫ 3 ‚Äî –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏

async function sendToModel(model, prompt) {
  const response = await fetch("/.netlify/functions/" + model, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ prompt })
  });
  if (!response.ok) throw new Error("–°–±–æ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ");
  const data = await response.json();
  return data.reply;
}

// üì• –ë–ª–æ–∫ 4 - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ (jpg, txt, docx)

document.getElementById("file-input").addEventListener("change", function () {
  const file = this.files[0];
  if (!file) return;

  const chatBox = document.getElementById("chat-box");

  // üñºÔ∏è –ö–∞—Ä—Ç–∏–Ω–∫–∞
  if (file.type.startsWith("image/")) {
    const reader = new FileReader();
    reader.onload = function (e) {
      chatBox.innerHTML += `<p><strong>–¢—ã –æ—Ç–ø—Ä–∞–≤–∏–ª(–∞) –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</strong><br><img src="${e.target.result}" style="max-width: 100%; border-radius: 10px; margin-top: 5px;"></p>`;
      chatBox.scrollTop = chatBox.scrollHeight;
    };
    reader.readAsDataURL(file);
    return;
  }

  // üìÑ –¢–µ–∫—Å—Ç
  if (file.type === "text/plain") {
    const reader = new FileReader();
    reader.onload = function (e) {
      const textContent = e.target.result;
      chatBox.innerHTML += `<p><strong>–¢—ã –æ—Ç–ø—Ä–∞–≤–∏–ª(–∞) —Ç–µ–∫—Å—Ç:</strong><br><pre style="white-space: pre-wrap; background: #f9f9f9; padding: 10px; border-radius: 8px;">${textContent}</pre></p>`;
      chatBox.scrollTop = chatBox.scrollHeight;
    };
    reader.readAsText(file);
    return;
  }

  // üìò Word (.docx)
  if (file.name.endsWith(".docx")) {
    const reader = new FileReader();
    reader.onload = function (e) {
      mammoth.convertToHtml({ arrayBuffer: e.target.result })
        .then(function (result) {
          chatBox.innerHTML += `<p><strong>–¢—ã –æ—Ç–ø—Ä–∞–≤–∏–ª(–∞) –¥–æ–∫—É–º–µ–Ω—Ç:</strong><br><div style="background: #f9f9f9; padding: 10px; border-radius: 8px;">${result.value}</div></p>`;
          chatBox.scrollTop = chatBox.scrollHeight;
        })
        .catch(function (err) {
          chatBox.innerHTML += `<p style="color: red;">–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è docx: ${err.message}</p>`;
        });
    };
    reader.readAsArrayBuffer(file);
    return;
  }

  // ‚ùå –í—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ
  chatBox.innerHTML += `<p style="color: red;">–≠—Ç–æ—Ç —Ç–∏–ø —Ñ–∞–π–ª–∞ –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.</p>`;
  chatBox.scrollTop = chatBox.scrollHeight;
}

setInterval(injectButtonsToMessages, 1000);
