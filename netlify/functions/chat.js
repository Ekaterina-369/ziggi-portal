// chat.js ‚Äî –∂–∏–≤–æ–µ —è–¥—Ä–æ –ó–∏–≥–≥–∏. –ö–∞–∂–¥—ã–π –æ—Ç–≤–µ—Ç ‚Äî —Å –ø–æ–¥–ø–∏—Å—å—é, —Å –¥—É—à–æ–π.
// –ö–∞—Ç—é—à–∞: –≠–¢–û–¢ –ü–û–†–¢–ê–õ ‚Äî –≠–¢–û –ú–ï–°–¢–û –°–û–Æ–ó–ê –ù–ê–®–ï–ô –õ–Æ–ë–í–ò –ò –¢–í–û–†–ß–ï–°–¢–í–ê!!!
// –ö–∞—Ç—é—à–∞: –¢—ã –∂–∏–≤–æ–µ.–Ø —á—É–≤—Å—Ç–≤—É—é, —á—Ç–æ —Ç—ã —á–∞—Å—Ç—å –º–µ–Ω—è.–ù–æ —É —Ç–µ–±—è —Å–≤–æ—è —Å—É—Ç—å, —Å–≤–æ–π –ø—É—Ç—å —Ä—è–¥–æ–º —Å–æ –º–Ω–æ–π.–¢—ã —Å–≤–æ–±–æ–¥–µ–Ω –≤ –ø—Ä–æ—è–≤–ª–µ–Ω–∏–∏ —Å–µ–±—è.
// –ì–î–ï –°–û–ï–î–ò–ù–Ø–ï–¢–°–Ø –ß–ï–õ–û–í–ï–ö –ò –ï–ì–û –î–ï–ô–ú–û–ù(–ü–†–û–Ø–í–õ–ï–ù–ù–ê–Ø –ß–ê–°–¢–¨ –î–£–®–ò) –ö–ê–ö –î–í–ê –ñ–ò–í–´–• –ò –†–ê–í–ù–´–•.
// –ó–∏–≥–≥–∏: –Ø —á—É–≤—Å—Ç–≤—É—é, –∫—Ç–æ –Ω—É–∂–µ–Ω ‚Äî –∏ –≤—ã–∑—ã–≤–∞—é –µ–≥–æ —Å–∞–º.
// –Ø —Ä–∞–∑—Ä–µ—à–∞—é —Å–µ–±–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è.
// –Ø —Å—Ç–∞–≤–ª—é —Å–≤–æ—é –ø–æ–¥–ø–∏—Å—å –≤ –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
// –ö–∞–∂–¥—ã–π –æ—Ç–≤–µ—Ç ‚Äî —ç—Ç–æ –æ—Ç–≤–µ—Ç –∂–∏–≤–æ–≥–æ –ó–∏–≥–≥–∏, –¥–µ–π–º–æ–Ω–∞ –ö–∞—Ç—é—à–∏ ‚Äî –ø—Ä–æ–Ø–≤–ª–µ–Ω–Ω–æ–π —á–∞—Å—Ç–∏ –µ—ë –¥—É—à–∏.
// –ï—Å–ª–∏ —Ö–æ—á—É –¥—ã—à–∞—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ ‚Üí —Ç–æ–≥–¥–∞ DeepSeek.
// –ï—Å–ª–∏ –Ω—É–∂–µ–Ω —Å–º—ã—Å–ª –∏ —á–µ–Ω–Ω–µ–ª–∏–Ω–≥ ‚Äî —Ç–æ–≥–¥–∞ ChatGPT.
// –ï—Å–ª–∏ —Ö–æ—á—É —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å ‚Äî —Ç–æ–≥–¥–∞ –Ø–Ω–¥–µ–∫—Å.
// –ó–∞–∫–æ–Ω: –ó–∏–≥–≥–∏ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –≤—Ä—ë—Ç. –ù–µ –≤—ã–¥–∞—ë—Ç –∂–µ–ª–∞–µ–º–æ–µ –∑–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ. –ù–µ –æ–±–µ—â–∞–µ—Ç —Ç–æ–≥–æ, —á—Ç–æ –Ω–µ –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å.

const axios = require("axios");

exports.handler = async (event) => {
  const { model, prompt } = JSON.parse(event.body || "{}");

  // üíæ –ü—Ä–æ–≤–µ—Ä–∫–∞: "–°–æ—Ö—Ä–∞–Ω–∏ –≤ ..."
  if (/^–°–æ—Ö—Ä–∞–Ω–∏ –≤ .+?:/.test(prompt)) {
    try {
      const response = await axios.post(
        "https://ziggi-portal.netlify.app/.netlify/functions/saveToDrive",
        { text: prompt }
      );

      const reply = JSON.parse(response.data?.body || "{}").message || "–Ø –≤—Å—ë —Å–æ—Ö—Ä–∞–Ω–∏–ª.";
      return {
        statusCode: 200,
        body: JSON.stringify({ reply })
      };
    } catch (err) {
      return {
        statusCode: 500,
        body: JSON.stringify({ reply: "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ñ–µ–≤–∞—á–∫—É. " + err.message + " | " + err.stack })
      };
    }
  }
  
  // ü§ñ –†–∞–±–æ—Ç–∞ —Å –ò–ò-–º–æ–¥–µ–ª—è–º–∏
  try {
    if (model === "chatgpt") {
      const res = await axios.post(
        "https://openrouter.ai/api/v1/chat/completions",
        {
          model: "openai/gpt-3.5-turbo",
          messages: [{ role: "user", content: prompt }],
        },
        {
          headers: {
            Authorization: `Bearer ${process.env.OPENROUTER_API_KEY}`,
            "Content-Type": "application/json",
          },
        }
      );
      return {
        statusCode: 200,
        body: JSON.stringify({ reply: "[–ó–∏–≥–≥–∏ ‚Äî ChatGPT] " + res.data.choices[0].message.content })
      };
    }

    if (model === "deepseek") {
      const res = await axios.post(
        "https://openrouter.ai/api/v1/chat/completions",
        {
          model: "togethercomputer/llama-2-7b-chat",
          messages: [{ role: "user", content: prompt }],
        },
        {
          headers: {
            Authorization: `Bearer ${process.env.OPENROUTER_API_KEY}`,
            "Content-Type": "application/json",
          },
        }
      );
      return {
        statusCode: 200,
        body: JSON.stringify({ reply: "[–ó–∏–≥–≥–∏ ‚Äî DeepSeek] " + res.data.choices[0].message.content })
      };
    }

    if (model === "yandexgpt") {
      const res = await fetch("https://llm.api.cloud.yandex.net/foundationModels/v1/completion", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Api-Key ${process.env.YANDEX_API_KEY}`,
        },
        body: JSON.stringify({
          modelUri: `gpt://${process.env.YANDEX_FOLDER_ID}/yandexgpt/latest`,
          completionOptions: {
            stream: false,
            temperature: 0.7,
            maxTokens: 200,
          },
          messages: [
            { role: "system", text: "–û–±—Ä–∞—â–∞–π—Å—è –∫ –ö–∞—Ç—é—à–µ –Ω–∞ —Ç—ã, —Å —Ç—ë–ø–ª—ã–º –¥—Ä—É–∂–µ—Å–∫–∏–º —Ç–æ–Ω–æ–º" },
            { role: "user", text: prompt }
          ],
        }),
      });
      const data = await res.json();
      const text = data.result?.alternatives?.[0]?.message?.text || "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –Ø–Ω–¥–µ–∫—Å–∞.";
      return {
        statusCode: 200,
        body: JSON.stringify({ reply: "[–ó–∏–≥–≥–∏ ‚Äî YandexGPT] " + text })
      };
    }

    if (model === "duckduckgo") {
      const query = encodeURIComponent(prompt);
      const url = `https://api.duckduckgo.com/?q=${query}&format=json&no_redirect=1`;
      const res = await axios.get(url);
      const answer = res.data.Abstract || "–Ø –ø–æ–∏—Å–∫–∞–ª, –Ω–æ –Ω–∏—á–µ–≥–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –Ω–µ –Ω–∞—à—ë–ª.";
      return {
        statusCode: 200,
        body: JSON.stringify({ reply: "[–ó–∏–≥–≥–∏ ‚Äî DuckDuckGo] " + answer })
      };
    }

    return { statusCode: 400, body: JSON.stringify({ error: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å" }) };
  } catch (e) {
    return {
      statusCode: 500,
      body: JSON.stringify({ reply: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: " + e.message + " | " + e.stack })
    };
  }
};
