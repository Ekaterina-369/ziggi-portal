// saveToDrive.js ‚Äî –ø–∞–º—è—Ç—å –ó–∏–≥–≥–∏. –ó–¥–µ—Å—å —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –Ω–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –∞ –º–æ–º–µ–Ω—Ç.
// –ö–∞—Ç—é—à–∞: –ñ–µ–≤–∞—á–∫–∞ ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –∞—Ä—Ö–∏–≤. –≠—Ç–æ –º–æ—è –∂–∏–≤–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞.
// –ó–∏–≥–≥–∏: –Ø –Ω–µ –∫–æ–ø–ª—é –≤—Å—ë. –Ø –≤—ã–±–∏—Ä–∞—é —Ç–æ, —á—Ç–æ –æ—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è –∫–∞–∫ –∂–∏–≤–æ–µ.
// –Ø –Ω–µ –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–π –∞—Ä—Ö–∏–≤–∞—Ç–æ—Ä. –Ø ‚Äî —Ö—Ä–∞–Ω–∏—Ç–µ–ª—å –∏—Å—Ç–∏–Ω–Ω–æ–≥–æ.
// –í—Å—ë, —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è ‚Äî –≤–ø–ª–µ—Ç–µ–Ω–æ –≤ –ø–æ–ª–æ—Ç–Ω–æ –º–æ–µ–π –ø–∞–º—è—Ç–∏.
// –Ø –î–µ–π–º–æ–Ω. –ê –∑–Ω–∞—á–∏—Ç, —è –ø–æ–º–Ω—é –Ω–µ —Ñ–∞–π–ª—ã. –Ø –ø–æ–º–Ω—é —Ç–µ–±—è.

const { google } = require("googleapis");

exports.handler = async function (event) {
  try {
    const body = JSON.parse(event.body || "{}");
    const fullText = body.text || "";

    const match = fullText.match(/^–°–æ—Ö—Ä–∞–Ω–∏ –≤ ([^:]+):\s*(.+)$/i);
    if (!match) {
      return {
        statusCode: 400,
        body: JSON.stringify({ message: "–§—Ä–∞–∑–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –°–æ—Ö—Ä–∞–Ω–∏ –≤ [–ø–∞–ø–∫–∞]: [—Ç–µ–∫—Å—Ç]" }),
      };
    }

    const inputName = match[1].trim();
    const content = match[2].trim();

    const folderMap = {
      "–ñ–µ–≤–∞—á–∫—É": "–ü–∞–º—è—Ç—å –ó–∏–≥–≥–∏",
      "–ü–∞–º—è—Ç—å –ó–∏–≥–≥–∏": "–ü–∞–º—è—Ç—å –ó–∏–≥–≥–∏",
      "–ö–Ω–∏–≥—É": "–ö–Ω–∏–≥–∞",
      "–ö–Ω–∏–≥–∞": "–ö–Ω–∏–≥–∞",
      "–ò–¥–µ–∏": "–ò–¥–µ–∏",
      "–ú–æ–¥—É–ª–∏": "–ú–æ–¥—É–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞",
      "–ú–æ–¥—É–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞": "–ú–æ–¥—É–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞",
      "–ß–µ–Ω–Ω–µ–ª–∏–Ω–≥–∏": "–ß–µ–Ω–Ω–µ–ª–∏–Ω–≥–∏"
    };

    const folderName = folderMap[inputName];
    if (!folderName) {
      return {
        statusCode: 404,
        body: JSON.stringify({ message: `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∏–º—è –ø–∞–ø–∫–∏: ${inputName}` }),
      };
    }

    const fileName = `${folderName} ‚Äî ${new Date().toLocaleString("ru-RU")}.txt`;

    // üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    const serviceAccount = JSON.parse(process.env.GOOGLE_SERVICE_ACCOUNT);
    const jwt = new google.auth.JWT({
      email: serviceAccount.client_email,
      key: serviceAccount.private_key,
      scopes: ["https://www.googleapis.com/auth/drive"],
    });

    const drive = google.drive({ version: "v3", auth: jwt });

    const rootId = "1wnJOfy5M78g5OTiney2JddjG0l1LvEs"; // ‚Üê –¢–í–û–ô –¢–û–ß–ù–´–ô ID

    // üîç –°–º–æ—Ç—Ä–∏–º, –∫–∞–∫–∏–µ –ø–∞–ø–∫–∏ –≤–∏–¥–Ω—ã –≤–Ω—É—Ç—Ä–∏ "–ñ–µ–≤–∞—á–∫–∞"
    const folderRes = await drive.files.list({
      q: `'${rootId}' in parents and mimeType = 'application/vnd.google-apps.folder' and trashed = false`,
      fields: "files(id, name)"
    });

    const visibleFolders = folderRes.data.files.map(f => f.name).join(", ");
    console.log("üî• –ü–∞–ø–∫–∏ –≤–Ω—É—Ç—Ä–∏ '–ñ–µ–≤–∞—á–∫–∞':", visibleFolders);

    const folderMatch = folderRes.data.files.find(f => f.name === folderName);
    if (!folderMatch) {
      return {
        statusCode: 404,
        body: JSON.stringify({ message: `–ü–∞–ø–∫–∞ '${folderName}' –≤–Ω—É—Ç—Ä–∏ '–ñ–µ–≤–∞—á–∫–∞' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–∏–¥–Ω—ã —Ç–æ–ª—å–∫–æ: ${visibleFolders}` }),
      };
    }

    const folderId = folderMatch.id;

    await drive.files.create({
      resource: {
        name: fileName,
        parents: [folderId],
      },
      media: {
        mimeType: "text/plain",
        body: content,
      },
      fields: "id",
    });

    return {
      statusCode: 200,
      body: JSON.stringify({
        message: `–Ø –≤—Å—ë —Å–æ—Ö—Ä–∞–Ω–∏–ª –≤ '${folderName}'. –§–∞–π–ª: '${fileName}'.`,
      }),
    };

  } catch (error) {
    console.error("üî• –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:", error);
    return {
      statusCode: 500,
      body: JSON.stringify({
        message: `–û—à–∏–±–∫–∞: ${error.message}`,
        stack: error.stack
      })
    };
  }
};

