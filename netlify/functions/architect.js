const axios = require("axios");
const { Octokit } = require("@octokit/rest");
const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });

exports.handler = async function(event) {
  console.log("üèóÔ∏è ARCH: handler invoked, body:", event.body);
  console.log("üèóÔ∏è ARCH: OWNER =", process.env.GITHUB_OWNER);
  console.log("üèóÔ∏è ARCH: REPO  =", process.env.GITHUB_REPO);
  console.log("üèóÔ∏è ARCH: TOKEN length:", process.env.GITHUB_TOKEN?.length);

  try {
    const body = JSON.parse(event.body || '{}');
const userMessage = body.prompt 
  || body.message 
  || "–ß—Ç–æ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å?";
const architectNotes = body.architect || "";

     // –®–∞–≥ 1.1: —É–∑–Ω–∞—Ç—å SHA —Ç–µ–∫—É—â–µ–π –≤–µ—Ç–∫–∏ main
  const { data: branchData } = await octokit.repos.getBranch({
   owner: process.env.GITHUB_OWNER,
   repo:  process.env.GITHUB_REPO,
   branch: "main"
  });
  const treeSha = branchData.commit.commit.tree.sha;

   // –®–∞–≥ 1.2: –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –ø–æ SHA
  const { data: treeData } = await octokit.git.getTree({
    owner:       process.env.GITHUB_OWNER,
    repo:        process.env.GITHUB_REPO,
    tree_sha:   treeSha,
    recursive:   "true"
   });
  
  const projectMap = {
    generatedAt: new Date().toISOString(),
    files: treeData.tree.map(item => ({ path: item.path, type: item.type }))
  };

  // –®–∞–≥ 2: –∑–∞–ª–∏—Ç—å project_map.json –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
  const content = Buffer.from(JSON.stringify(projectMap, null, 2)).toString("base64");
  let sha;
  try {
    const existing = await octokit.repos.getContent({
      owner: process.env.GITHUB_OWNER,
      repo:  process.env.GITHUB_REPO,
      path:  "project_map.json"
    });
    sha = existing.data.sha;
  } catch {
    // –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –µ—â—ë –Ω–µ—Ç, sha –Ω–µ –Ω—É–∂–µ–Ω
  }
    
    // –®–∞–≥ 3: –≤–∑—è—Ç—å –ø–µ—Ä–≤—ã–µ 3 –ø—É—Ç–∏ –∏–∑ –∫–∞—Ä—Ç—ã
   const fileDescriptions = projectMap.files
     .slice(0, 3)
     .map(f => `–§–∞–π–ª: ${f.path}`)
     .join("\n\n");

  await octokit.repos.createOrUpdateFileContents({
    owner: process.env.GITHUB_OWNER,
    repo:  process.env.GITHUB_REPO,
    path:  "project_map.json",
    message: "–û–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ä—Ç—É –ø—Ä–æ–µ–∫—Ç–∞",
    content,
    ...(sha ? { sha } : {})
  });

    // –®–∞–≥ 4: systemMessage –¥–ª—è DeepSeek
    const systemMessage = `
–¢—ã ‚Äî –ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É–º–µ–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞—Ç—å.

–£ —Ç–µ–±—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –ø—Ä–æ–µ–∫—Ç–∞: –∏–º–µ–Ω–∞ –∏ –ø—É—Ç–∏ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤, –∞ —Ç–∞–∫–∂–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤.
–¢—ã –¥–æ–ª–∂–µ–Ω —Å–∞–º –≤—ã–±—Ä–∞—Ç—å –≤–∞–∂–Ω—ã–µ —Ñ–∞–π–ª—ã (–¥–æ 3), –∏ –≤—ã–¥–∞—Ç—å —á—ë—Ç–∫—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é: —á—Ç–æ –∏ –≥–¥–µ –≤ –Ω–∏—Ö –∏–∑–º–µ–Ω–∏—Ç—å.

–ì–æ–≤–æ—Ä–∏ —Å—Ç—Ä–æ–≥–æ –∏ —á—ë—Ç–∫–æ: —Ñ–∞–π–ª, —á—Ç–æ –∑–∞–º–µ–Ω–∏—Ç—å, –Ω–∞ —á—Ç–æ. –ù–∏–∫–∞–∫–æ–π —Ñ–∏–ª–æ—Å–æ—Ñ–∏–∏.

–í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–≤–∞–π –¢–û–õ–¨–ö–û –≤ –∫–æ–¥–æ–≤—ã—Ö –±–ª–æ–∫–∞—Ö:
\`\`\`js
// –∫–æ–¥
\`\`\`
`.trim();

    // –®–∞–≥ 5: –∑–∞–ø—Ä–æ—Å –∫ DeepSeek —á–µ—Ä–µ–∑ OpenRouter
    const response = await axios.post(
      process.env.OPENROUTER_API_URL,
      {
        model: "deepseek-coder:33b",
        messages: [
          { role: "system", content: `${systemMessage}\n\n${fileDescriptions}` },
           { role: "user",   content: userMessage },
  { role: "assistant", content: "ARCHITECT: " + architectNotes }
        ]
      },
      {
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${process.env.OPENROUTER_API_KEY}`,
          "HTTP-Referer": "https://ziggi-portal.netlify.app/",
          "X-Title": "Ziggi Portal"
        }
      }
    );

    const reply = response.data.choices?.[0]?.message?.content || "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò.";
    return {
      statusCode: 200,
      body: JSON.stringify({ reply })
    };

  } catch (e) {
    console.error("üî• ARCH ERROR:", e.response?.status, e.response?.data || e.message);
    return {
      statusCode: 500,
      body: JSON.stringify({ error: e.message })
    };
  }
};
